# StudyAI Development Environment
# Docker Compose configuration for local development
version: '3.8'

services:
  # =====================================
  # API Gateway Service
  # =====================================
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: studyai-gateway-dev
    ports:
      - "3001:3001"
      - "9229:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - PORT=3001
      - LOG_LEVEL=debug
      - REDIS_URL=redis://redis:6379
      - AI_ENGINE_URL=http://ai-engine:8000
      # Development-specific settings
      - ENABLE_HOT_RELOAD=true
      - ENABLE_DEBUG_LOGGING=true
      - ENABLE_GATEWAY_LOGGING=true
      - ENABLE_METRICS=true
      - ENABLE_HEALTH_CHECKS=true
      # Service authentication (development keys)
      - SERVICE_JWT_SECRET=dev-service-jwt-secret-change-in-production
      - JWT_SECRET=dev-user-jwt-secret-change-in-production
      - ENCRYPTION_KEY=dev-encryption-key-32-bytes-change-in-production
    volumes:
      # Mount source code for hot reload
      - ./src:/app/src:ro
      - ./docs:/app/docs:ro
      - ./tests:/app/tests:ro
      - ./scripts:/app/scripts:ro
      # Persistent volumes for logs and reports
      - gateway-logs:/app/logs
      - gateway-reports:/app/reports
    depends_on:
      - redis
      - prometheus
    networks:
      - studyai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =====================================
  # Redis Cache Service
  # =====================================
  redis:
    image: redis:7-alpine
    container_name: studyai-redis-dev
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - studyai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================
  # Prometheus Monitoring
  # =====================================
  prometheus:
    image: prom/prometheus:latest
    container_name: studyai-prometheus-dev
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - studyai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================
  # Grafana Dashboard
  # =====================================
  grafana:
    image: grafana/grafana:latest
    container_name: studyai-grafana-dev
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - studyai-network
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================
  # AI Engine Service (Mock for Development)
  # =====================================
  ai-engine:
    image: wiremock/wiremock:latest
    container_name: studyai-ai-engine-mock
    ports:
      - "8000:8080"
    command: ["--global-response-templating", "--verbose"]
    volumes:
      - ./config/wiremock:/home/wiremock:ro
    networks:
      - studyai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/__admin/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================
  # Load Balancer (nginx)
  # =====================================
  nginx:
    image: nginx:alpine
    container_name: studyai-nginx-dev
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - api-gateway
    networks:
      - studyai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# =====================================
# Network Configuration
# =====================================
networks:
  studyai-network:
    driver: bridge
    name: studyai-dev-network

# =====================================
# Volume Configuration
# =====================================
volumes:
  # Application volumes
  gateway-logs:
    name: studyai-gateway-logs-dev
  gateway-reports:
    name: studyai-gateway-reports-dev
  
  # Data persistence volumes
  redis-data:
    name: studyai-redis-data-dev
  prometheus-data:
    name: studyai-prometheus-data-dev
  grafana-data:
    name: studyai-grafana-data-dev
  
  # Log volumes
  nginx-logs:
    name: studyai-nginx-logs-dev