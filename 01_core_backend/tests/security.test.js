/**\n * Security Tests for Phase 2\n * Tests for service authentication, request validation, and security features\n */\n\nconst { test } = require('tap');\nconst { build } = require('./helper');\nconst nock = require('nock');\nconst jwt = require('jsonwebtoken');\nconst crypto = require('crypto');\n\n// Mock service authentication\nconst mockServiceAuth = (valid = true, secret = 'test-secret') => {\n  if (valid) {\n    const token = jwt.sign(\n      {\n        iss: 'api-gateway',\n        aud: 'ai-engine',\n        sub: 'service-auth',\n        iat: Math.floor(Date.now() / 1000),\n        jti: crypto.randomUUID()\n      },\n      secret,\n      { expiresIn: '15m' }\n    );\n    return token;\n  }\n  return 'invalid-token';\n};\n\ntest('Service Authentication Tests', async (t) => {\n  // Set up authentication environment\n  process.env.SERVICE_AUTH_ENABLED = 'true';\n  process.env.SERVICE_JWT_SECRET = 'test-secret';\n  \n  const app = await build(t);\n  \n  t.test('valid service token is accepted', async (t) => {\n    const validToken = mockServiceAuth(true, 'test-secret');\n    \n    const scope = nock(process.env.AI_ENGINE_URL)\n      .post('/api/v1/process-question')\n      .matchHeader('authorization', `Bearer ${validToken}`)\n      .reply(200, { success: true, answer: 'Test answer' });\n\n    const res = await app.inject({\n      method: 'POST',\n      url: '/api/ai/process-question',\n      payload: {\n        question: 'What is 2+2?',\n        subject: 'mathematics',\n        student_id: 'test123'\n      },\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    \n    t.equal(res.statusCode, 200);\n    scope.done();\n  });\n\n  t.test('invalid service token is rejected by AI Engine', async (t) => {\n    const scope = nock(process.env.AI_ENGINE_URL)\n      .post('/api/v1/process-question')\n      .reply(401, {\n        detail: {\n          error: 'Service Authentication Failed',\n          code: 'INVALID_TOKEN'\n        }\n      });\n\n    const res = await app.inject({\n      method: 'POST',\n      url: '/api/ai/process-question',\n      payload: {\n        question: 'What is 2+2?',\n        subject: 'mathematics',\n        student_id: 'test123'\n      }\n    });\n    \n    t.equal(res.statusCode, 401);\n    const payload = JSON.parse(res.payload);\n    t.equal(payload.code, 'AI_SERVICE_ERROR');\n    \n    scope.done();\n  });\n});\n\ntest('Request Validation Tests', async (t) => {\n  process.env.REQUEST_VALIDATION_ENABLED = 'true';\n  const app = await build(t);\n\n  t.test('missing required fields are rejected', async (t) => {\n    const res = await app.inject({\n      method: 'POST',\n      url: '/api/ai/process-question',\n      payload: {\n        question: 'What is 2+2?'\n        // Missing subject and student_id\n      }\n    });\n    \n    t.equal(res.statusCode, 422); // FastAPI validation error\n  });\n\n  t.test('invalid subject is rejected', async (t) => {\n    const res = await app.inject({\n      method: 'POST',\n      url: '/api/ai/process-question',\n      payload: {\n        question: 'What is 2+2?',\n        subject: 'invalid-subject',\n        student_id: 'test123'\n      }\n    });\n    \n    t.equal(res.statusCode, 422);\n  });\n\n  t.test('question too long is rejected', async (t) => {\n    const longQuestion = 'a'.repeat(3000); // Exceeds 2000 char limit\n    \n    const res = await app.inject({\n      method: 'POST',\n      url: '/api/ai/process-question',\n      payload: {\n        question: longQuestion,\n        subject: 'mathematics',\n        student_id: 'test123'\n      }\n    });\n    \n    t.equal(res.statusCode, 422);\n  });\n});\n\ntest('Security Headers Tests', async (t) => {\n  const app = await build(t);\n\n  t.test('security headers are present', async (t) => {\n    const res = await app.inject({\n      method: 'GET',\n      url: '/health'\n    });\n    \n    t.equal(res.statusCode, 200);\n    t.ok(res.headers['x-content-type-options']);\n    t.ok(res.headers['x-frame-options']);\n    t.ok(res.headers['x-xss-protection']);\n    t.ok(res.headers['referrer-policy']);\n    t.ok(res.headers['x-request-id']);\n  });\n});\n\ntest('Content-Type Validation Tests', async (t) => {\n  const app = await build(t);\n\n  t.test('missing content-type header', async (t) => {\n    const res = await app.inject({\n      method: 'POST',\n      url: '/api/ai/process-question',\n      payload: JSON.stringify({\n        question: 'What is 2+2?',\n        subject: 'mathematics',\n        student_id: 'test123'\n      })\n      // No content-type header\n    });\n    \n    // Should fail due to missing content-type\n    t.not(res.statusCode, 200);\n  });\n\n  t.test('wrong content-type header', async (t) => {\n    const res = await app.inject({\n      method: 'POST',\n      url: '/api/ai/process-question',\n      payload: 'invalid-json',\n      headers: {\n        'content-type': 'text/plain'\n      }\n    });\n    \n    // Should fail due to wrong content-type\n    t.not(res.statusCode, 200);\n  });\n});\n\ntest('Error Handling Security Tests', async (t) => {\n  const app = await build(t);\n\n  t.test('error responses do not leak sensitive info', async (t) => {\n    const scope = nock(process.env.AI_ENGINE_URL)\n      .post('/api/v1/process-question')\n      .replyWithError('Internal database connection failed with password: secret123');\n\n    const res = await app.inject({\n      method: 'POST',\n      url: '/api/ai/process-question',\n      payload: {\n        question: 'What is 2+2?',\n        subject: 'mathematics',\n        student_id: 'test123'\n      }\n    });\n    \n    t.not(res.statusCode, 200);\n    const payload = JSON.parse(res.payload);\n    \n    // Should not contain sensitive information\n    t.not(payload.error, 'match', /password/);\n    t.not(payload.message, 'match', /secret/);\n    t.equal(payload.code, 'SERVICE_UNAVAILABLE');\n    \n    scope.done();\n  });\n});\n\ntest('Rate Limiting Tests', async (t) => {\n  // Note: Rate limiting would be implemented in a real environment\n  // These are placeholder tests for the concept\n  \n  t.test('rate limiting concept validation', async (t) => {\n    const app = await build(t);\n    \n    // This would test actual rate limiting in production\n    t.pass('Rate limiting tests would be implemented with actual rate limiter');\n  });\n});\n\ntest('Authentication Bypass Tests', async (t) => {\n  // Test that authentication can be disabled for development\n  process.env.SERVICE_AUTH_ENABLED = 'false';\n  \n  const app = await build(t);\n\n  t.test('authentication disabled works', async (t) => {\n    const scope = nock(process.env.AI_ENGINE_URL)\n      .post('/api/v1/process-question')\n      .reply(200, { success: true, answer: 'Test answer' });\n\n    const res = await app.inject({\n      method: 'POST',\n      url: '/api/ai/process-question',\n      payload: {\n        question: 'What is 2+2?',\n        subject: 'mathematics',\n        student_id: 'test123'\n      }\n    });\n    \n    // Should work without authentication headers\n    t.equal(res.statusCode, 200);\n    \n    scope.done();\n  });\n});