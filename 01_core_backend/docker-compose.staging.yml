# StudyAI Staging Environment Configuration
# Docker Compose configuration for staging deployment
version: '3.8'

services:
  # =====================================
  # API Gateway Service (Staging)
  # =====================================
  api-gateway:
    image: ghcr.io/studyai/api-gateway:develop
    container_name: studyai-gateway-staging
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=staging
      - PORT=3001
      - LOG_LEVEL=info
      - REDIS_URL=redis://redis:6379
      # Staging environment secrets (from environment)
      - SERVICE_JWT_SECRET=${SERVICE_JWT_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # Database configuration
      - SUPABASE_URL=${SUPABASE_STAGING_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_STAGING_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_STAGING_SERVICE_KEY}
      # Staging-specific settings
      - ENABLE_METRICS=true
      - ENABLE_HEALTH_CHECKS=true
      - ENABLE_GATEWAY_LOGGING=true
      - PROMETHEUS_METRICS_ENABLED=true
      - REDIS_CACHING_ENABLED=true
      - COMPRESSION_ENABLED=true
      # Relaxed rate limiting for testing
      - RATE_LIMIT_MAX_REQUESTS=500
      - RATE_LIMIT_WINDOW_MS=900000
    volumes:
      - gateway-logs:/app/logs
      - gateway-reports:/app/reports
    depends_on:
      - redis
      - prometheus
    networks:
      - studyai-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

  # =====================================
  # Redis Cache Service (Staging)
  # =====================================
  redis:
    image: redis:7-alpine
    container_name: studyai-redis-staging
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
      - ./config/redis-staging.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - studyai-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================
  # Prometheus Monitoring (Staging)
  # =====================================
  prometheus:
    image: prom/prometheus:latest
    container_name: studyai-prometheus-staging
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
      - '--web.external-url=https://staging-metrics.studyai.com'
    volumes:
      - ./config/prometheus-staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - studyai-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================
  # Grafana Dashboard (Staging)
  # =====================================
  grafana:
    image: grafana/grafana:latest
    container_name: studyai-grafana-staging
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SERVER_ROOT_URL=https://staging-dashboard.studyai.com
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/staging/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/staging/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - studyai-staging-network
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================
  # Load Balancer (nginx - Staging)
  # =====================================
  nginx:
    image: nginx:alpine
    container_name: studyai-nginx-staging
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx-staging.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./config/ssl/staging:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - api-gateway
    networks:
      - studyai-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# =====================================
# Network Configuration
# =====================================
networks:
  studyai-staging-network:
    driver: bridge
    name: studyai-staging-network

# =====================================
# Volume Configuration
# =====================================
volumes:
  gateway-logs:
    name: studyai-gateway-logs-staging
  gateway-reports:
    name: studyai-gateway-reports-staging
  redis-data:
    name: studyai-redis-data-staging
  prometheus-data:
    name: studyai-prometheus-data-staging
  grafana-data:
    name: studyai-grafana-data-staging
  nginx-logs:
    name: studyai-nginx-logs-staging