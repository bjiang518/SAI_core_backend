# StudyAI API Gateway - CI/CD Pipeline
# Comprehensive GitHub Actions workflow for testing, building, and deployment

name: StudyAI Backend CI/CD

on:
  push:
    branches: [ main, develop, 'release/*' ]
    paths:
      - '01_core_backend/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '01_core_backend/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: studyai/api-gateway
  WORKING_DIRECTORY: ./01_core_backend

jobs:
  # =====================================
  # Code Quality & Testing
  # =====================================
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        continue-on-error: true
        
      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
          
      - name: Run security audit
        run: npm audit --audit-level moderate
        
      - name: Generate test coverage
        run: npm run test:coverage
        continue-on-error: true
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            ${{ env.WORKING_DIRECTORY }}/coverage/
            ${{ env.WORKING_DIRECTORY }}/test-results.xml
          retention-days: 30

  # =====================================
  # Security Scanning
  # =====================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          command: test
        continue-on-error: true
        
      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3001'
        continue-on-error: true

  # =====================================
  # Build Docker Images
  # =====================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.WORKING_DIRECTORY }}
          file: ${{ env.WORKING_DIRECTORY }}/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: sbom.spdx.json
          
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  # =====================================
  # Deploy to Staging
  # =====================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment:
      name: staging
      url: https://staging-api.studyai.com
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup staging environment
        run: |
          echo "Setting up staging deployment..."
          # Add staging-specific setup here
          
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add deployment script here
          # docker-compose -f docker-compose.staging.yml up -d
          
      - name: Run smoke tests
        run: |
          echo "Running staging smoke tests..."
          # Add smoke tests here
          
      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: "‚úÖ Staging deployment successful!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =====================================
  # Deploy to Production
  # =====================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://api.studyai.com
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Production deployment approval
        uses: trstringer/manual-approval@v1
        if: github.event_name != 'workflow_dispatch'
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ github.actor }}
          minimum-approvals: 1
          issue-title: "Deploy to Production"
          issue-body: "Please approve the production deployment"
          
      - name: Setup production environment
        run: |
          echo "Setting up production deployment..."
          # Add production-specific setup here
          
      - name: Deploy to production (Blue-Green)
        run: |
          echo "Deploying to production with blue-green strategy..."
          # Add blue-green deployment logic here
          
      - name: Run production health checks
        run: |
          echo "Running production health checks..."
          # Add comprehensive health checks
          
      - name: Update monitoring dashboards
        run: |
          echo "Updating monitoring dashboards..."
          # Update Grafana dashboards with new deployment info
          
      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: "üöÄ Production deployment successful!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =====================================
  # Performance Testing
  # =====================================
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run performance tests
        run: npm run performance:analysis
        env:
          TEST_BASE_URL: https://staging-api.studyai.com
          
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: ${{ env.WORKING_DIRECTORY }}/reports/performance-test-results.json

  # =====================================
  # Rollback (Manual Trigger)
  # =====================================
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Execute rollback
        run: |
          echo "Executing rollback procedures..."
          # Add rollback logic here
          node scripts/phase4-rollback.js emergency
          
      - name: Verify rollback success
        run: |
          echo "Verifying rollback success..."
          # Add rollback verification
          
      - name: Notify rollback completion
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "‚ö†Ô∏è Rollback completed successfully!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}