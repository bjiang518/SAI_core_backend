# StudyAI Production Environment
# Docker Compose configuration for production deployment
version: '3.8'

services:
  # =====================================
  # API Gateway Service (Production)
  # =====================================
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: studyai/api-gateway:latest
    container_name: studyai-gateway-prod
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - LOG_LEVEL=warn
      - REDIS_URL=redis://redis:6379
      # Production security settings
      - SERVICE_JWT_SECRET=${SERVICE_JWT_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # Database configuration
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      # Performance settings
      - ENABLE_METRICS=true
      - ENABLE_HEALTH_CHECKS=true
      - PROMETHEUS_METRICS_ENABLED=true
      - REDIS_CACHING_ENABLED=true
      - COMPRESSION_ENABLED=true
      # Security settings
      - RATE_LIMIT_MAX_REQUESTS=1000
      - RATE_LIMIT_WINDOW_MS=900000
      - SECURE_HEADERS_ENABLED=true
    volumes:
      - gateway-logs:/app/logs
      - gateway-reports:/app/reports
    depends_on:
      - redis
      - prometheus
    networks:
      - studyai-network
    restart: always
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 30s
        order: start-first
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =====================================
  # Redis Cache Service (Production)
  # =====================================
  redis:
    image: redis:7-alpine
    container_name: studyai-redis-prod
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
      - ./config/redis-prod.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - studyai-network
    restart: always
    deploy:
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================
  # Prometheus Monitoring (Production)
  # =====================================
  prometheus:
    image: prom/prometheus:latest
    container_name: studyai-prometheus-prod
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.external-url=https://metrics.studyai.com'
    volumes:
      - ./config/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - studyai-network
    restart: always
    deploy:
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================
  # Grafana Dashboard (Production)
  # =====================================
  grafana:
    image: grafana/grafana:latest
    container_name: studyai-grafana-prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SERVER_ROOT_URL=https://dashboard.studyai.com
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-clock-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./config/grafana/production/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/production/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - studyai-network
    restart: always
    depends_on:
      - prometheus
    deploy:
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================
  # Load Balancer (nginx - Production)
  # =====================================
  nginx:
    image: nginx:alpine
    container_name: studyai-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NGINX_WORKER_PROCESSES=auto
      - NGINX_WORKER_CONNECTIONS=1024
    volumes:
      - ./config/nginx/nginx-prod.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./config/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - api-gateway
    networks:
      - studyai-network
    restart: always
    deploy:
      restart_policy:
        condition: any
        delay: 10s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =====================================
  # Log Aggregation (Optional)
  # =====================================
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: studyai-filebeat-prod
    user: root
    volumes:
      - ./config/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - gateway-logs:/var/log/gateway:ro
      - nginx-logs:/var/log/nginx:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS}
      - KIBANA_HOST=${KIBANA_HOST}
    networks:
      - studyai-network
    restart: always
    depends_on:
      - api-gateway
      - nginx

# =====================================
# Network Configuration
# =====================================
networks:
  studyai-network:
    driver: bridge
    name: studyai-prod-network
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =====================================
# Volume Configuration
# =====================================
volumes:
  # Application volumes
  gateway-logs:
    name: studyai-gateway-logs-prod
    driver: local
  gateway-reports:
    name: studyai-gateway-reports-prod
    driver: local
  
  # Data persistence volumes
  redis-data:
    name: studyai-redis-data-prod
    driver: local
  prometheus-data:
    name: studyai-prometheus-data-prod
    driver: local
  grafana-data:
    name: studyai-grafana-data-prod
    driver: local
  
  # Log volumes
  nginx-logs:
    name: studyai-nginx-logs-prod
    driver: local