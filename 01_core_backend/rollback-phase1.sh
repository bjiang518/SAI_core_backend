#!/bin/bash\n\n# StudyAI Phase 1 Rollback Script\n# Safely rolls back API Gateway changes if issues occur\n\nset -e\n\necho \"🔄 StudyAI Phase 1 Rollback Script\"\necho \"====================================\"\n\n# Check if we're in the right directory\nif [ ! -f \"package.json\" ] || [ ! -d \"src/gateway\" ]; then\n    echo \"❌ Error: Run this script from the 01_core_backend directory\"\n    exit 1\nfi\n\n# Function to prompt for confirmation\nconfirm() {\n    read -p \"$1 (y/N): \" -n 1 -r\n    echo\n    [[ $REPLY =~ ^[Yy]$ ]]\n}\n\necho \"📋 Rollback Options:\"\necho \"1. Disable API Gateway (use feature flag)\"\necho \"2. Revert to original simple gateway\"\necho \"3. Full rollback (remove all Phase 1 changes)\"\necho \"\"\n\nread -p \"Choose rollback option (1-3): \" OPTION\n\ncase $OPTION in\n    1)\n        echo \"🔧 Disabling API Gateway via feature flag...\"\n        if [ -f \".env\" ]; then\n            sed -i.bak 's/USE_API_GATEWAY=true/USE_API_GATEWAY=false/' .env\n            echo \"✅ Disabled USE_API_GATEWAY in .env\"\n        else\n            echo \"USE_API_GATEWAY=false\" > .env\n            echo \"✅ Created .env with USE_API_GATEWAY=false\"\n        fi\n        \n        echo \"🔄 Restarting service...\"\n        if command -v pm2 &> /dev/null; then\n            pm2 restart studyai-gateway || echo \"⚠️ PM2 restart failed - restart manually\"\n        else\n            echo \"⚠️ Please restart your service manually\"\n        fi\n        \n        echo \"✅ Gateway disabled. Service will run in fallback mode.\"\n        ;;\n        \n    2)\n        if confirm \"⚠️ This will revert to the original simple gateway. Continue?\"; then\n            echo \"📄 Backing up current gateway...\"\n            cp src/gateway/index.js src/gateway/index.js.phase1.backup\n            \n            echo \"🔄 Restoring original gateway...\"\n            cat > src/gateway/index.js << 'EOF'\nconst fastify = require('fastify')({ logger: true });\nconst axios = require('axios');\n\nconst AI_ENGINE_URL = process.env.AI_ENGINE_URL || 'http://localhost:8000';\n\n// Health check endpoint\nfastify.get('/health', async (request, reply) => {\n  return { status: 'ok', service: 'api-gateway' };\n});\n\n// AI Engine proxy\nfastify.all('/api/ai/*', async (request, reply) => {\n  const servicePath = request.url.replace('/api/ai', '');\n  try {\n    const response = await axios({\n      method: request.method,\n      url: `${AI_ENGINE_URL}${servicePath}`,\n      data: request.body,\n      headers: {\n        // Forward any important headers\n        'Content-Type': request.headers['content-type'],\n      },\n    });\n    reply.send(response.data);\n  } catch (error) {\n    fastify.log.error(error);\n    reply.status(500).send({ error: 'Error connecting to the AI Engine' });\n  }\n});\n\nconst start = async () => {\n  try {\n    await fastify.listen({ port: 4000 });\n  } catch (err) {\n    fastify.log.error(err);\n    process.exit(1);\n  }\n};\n\nstart();\nEOF\n            \n            echo \"✅ Reverted to original simple gateway\"\n            echo \"📝 Enhanced gateway backed up as: src/gateway/index.js.phase1.backup\"\n        fi\n        ;;\n        \n    3)\n        if confirm \"⚠️ This will remove ALL Phase 1 changes. Are you sure?\"; then\n            echo \"💾 Creating full backup...\"\n            \n            # Create backup directory\n            BACKUP_DIR=\"../phase1_backup_$(date +%Y%m%d_%H%M%S)\"\n            mkdir -p \"$BACKUP_DIR\"\n            \n            # Backup Phase 1 files\n            cp -r src/gateway/config \"$BACKUP_DIR/\" 2>/dev/null || true\n            cp -r src/gateway/services \"$BACKUP_DIR/\" 2>/dev/null || true\n            cp -r src/gateway/routes \"$BACKUP_DIR/\" 2>/dev/null || true\n            cp -r src/gateway/middleware \"$BACKUP_DIR/\" 2>/dev/null || true\n            cp -r tests \"$BACKUP_DIR/\" 2>/dev/null || true\n            cp src/gateway/index.js \"$BACKUP_DIR/index.js.enhanced\" 2>/dev/null || true\n            cp .env.example \"$BACKUP_DIR/\" 2>/dev/null || true\n            \n            echo \"🗑️ Removing Phase 1 additions...\"\n            \n            # Remove Phase 1 directories\n            rm -rf src/gateway/config\n            rm -rf src/gateway/services  \n            rm -rf src/gateway/routes\n            rm -rf src/gateway/middleware\n            rm -rf tests\n            \n            # Restore original gateway\n            cat > src/gateway/index.js << 'EOF'\nconst fastify = require('fastify')({ logger: true });\nconst axios = require('axios');\n\nconst AI_ENGINE_URL = process.env.AI_ENGINE_URL || 'http://localhost:8000';\n\n// Health check endpoint\nfastify.get('/health', async (request, reply) => {\n  return { status: 'ok', service: 'api-gateway' };\n});\n\n// AI Engine proxy\nfastify.all('/api/ai/*', async (request, reply) => {\n  const servicePath = request.url.replace('/api/ai', '');\n  try {\n    const response = await axios({\n      method: request.method,\n      url: `${AI_ENGINE_URL}${servicePath}`,\n      data: request.body,\n      headers: {\n        // Forward any important headers\n        'Content-Type': request.headers['content-type'],\n      },\n    });\n    reply.send(response.data);\n  } catch (error) {\n    fastify.log.error(error);\n    reply.status(500).send({ error: 'Error connecting to the AI Engine' });\n  }\n});\n\nconst start = async () => {\n  try {\n    await fastify.listen({ port: 4000 });\n  } catch (err) {\n    fastify.log.error(err);\n    process.exit(1);\n  }\n};\n\nstart();\nEOF\n            \n            # Restore original package.json scripts\n            sed -i.bak 's/\"test\": \"tap tests\\/\\*.test.js\"/\"test\": \"jest\"/' package.json\n            sed -i.bak '/\"test:gateway\":/d' package.json\n            sed -i.bak '/\"test:performance\":/d' package.json\n            sed -i.bak '/\"test:coverage\":/d' package.json\n            \n            echo \"✅ Full rollback completed\"\n            echo \"📂 All Phase 1 files backed up to: $BACKUP_DIR\"\n            echo \"🔄 Please restart your service\"\n        fi\n        ;;\n        \n    *)\n        echo \"❌ Invalid option. Exiting.\"\n        exit 1\n        ;;\nesac\n\necho \"\"\necho \"🎯 Rollback Summary:\"\necho \"- Gateway changes have been rolled back\"\necho \"- Service may need manual restart\"\necho \"- Monitor logs for any issues\"\necho \"- Backup files preserved for recovery\"\necho \"\"\necho \"To re-enable Phase 1, set USE_API_GATEWAY=true in .env\"\necho \"For help, check: INCREMENTAL_IMPLEMENTATION_PLAN.md\"\n\necho \"✅ Rollback script completed successfully!\"