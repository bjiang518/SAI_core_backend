#!/bin/bash\n\n# StudyAI Phase 2 Security Rollback Script\n# Safely rolls back service authentication and security features\n\nset -e\n\necho \"🔐 StudyAI Phase 2 Security Rollback Script\"\necho \"===============================================\"\n\n# Check if we're in the right directory\nif [ ! -f \"package.json\" ] || [ ! -d \"src/gateway\" ]; then\n    echo \"❌ Error: Run this script from the 01_core_backend directory\"\n    exit 1\nfi\n\n# Function to prompt for confirmation\nconfirm() {\n    read -p \"$1 (y/N): \" -n 1 -r\n    echo\n    [[ $REPLY =~ ^[Yy]$ ]]\n}\n\necho \"📋 Security Rollback Options:\"\necho \"1. Disable Service Authentication (recommended for quick rollback)\"\necho \"2. Disable Request Validation\"\necho \"3. Disable All Security Features\"\necho \"4. Full Phase 2 Rollback (remove all security components)\"\necho \"\"\n\nread -p \"Choose rollback option (1-4): \" OPTION\n\ncase $OPTION in\n    1)\n        echo \"🔧 Disabling Service Authentication...\"\n        \n        # Update .env file\n        if [ -f \".env\" ]; then\n            sed -i.bak 's/SERVICE_AUTH_ENABLED=true/SERVICE_AUTH_ENABLED=false/' .env\n            echo \"✅ Disabled SERVICE_AUTH_ENABLED in .env\"\n        else\n            echo \"SERVICE_AUTH_ENABLED=false\" > .env\n            echo \"✅ Created .env with SERVICE_AUTH_ENABLED=false\"\n        fi\n        \n        # Also update AI Engine .env if it exists\n        if [ -f \"../03_ai_engine/.env\" ]; then\n            sed -i.bak 's/SERVICE_AUTH_ENABLED=true/SERVICE_AUTH_ENABLED=false/' ../03_ai_engine/.env\n            echo \"✅ Disabled SERVICE_AUTH_ENABLED in AI Engine\"\n        fi\n        \n        echo \"🔄 Service authentication disabled. Services will accept unauthenticated requests.\"\n        ;;\n        \n    2)\n        echo \"🔧 Disabling Request Validation...\"\n        \n        if [ -f \".env\" ]; then\n            sed -i.bak 's/REQUEST_VALIDATION_ENABLED=true/REQUEST_VALIDATION_ENABLED=false/' .env\n            echo \"✅ Disabled REQUEST_VALIDATION_ENABLED in .env\"\n        else\n            echo \"REQUEST_VALIDATION_ENABLED=false\" > .env\n            echo \"✅ Created .env with REQUEST_VALIDATION_ENABLED=false\"\n        fi\n        \n        echo \"🔄 Request validation disabled. All requests will bypass validation.\"\n        ;;\n        \n    3)\n        if confirm \"⚠️ This will disable ALL security features. Continue?\"; then\n            echo \"🔧 Disabling All Security Features...\"\n            \n            # Create/update .env with all security disabled\n            cat > .env << 'EOF'\n# Security Features Disabled - Rollback Mode\nSERVICE_AUTH_ENABLED=false\nREQUEST_VALIDATION_ENABLED=false\nVALIDATION_STRICT_MODE=false\nSECURE_HEADERS_ENABLED=false\n\n# Keep basic gateway functionality\nUSE_API_GATEWAY=true\nENABLE_HEALTH_CHECKS=true\nENABLE_METRICS=true\nAI_ENGINE_URL=http://localhost:8000\nEOF\n            \n            # Update AI Engine .env\n            if [ -f \"../03_ai_engine/.env\" ]; then\n                sed -i.bak 's/SERVICE_AUTH_ENABLED=true/SERVICE_AUTH_ENABLED=false/' ../03_ai_engine/.env\n            else\n                echo \"SERVICE_AUTH_ENABLED=false\" > ../03_ai_engine/.env\n            fi\n            \n            echo \"✅ All security features disabled\"\n        fi\n        ;;\n        \n    4)\n        if confirm \"⚠️ This will remove ALL Phase 2 security components. Are you sure?\"; then\n            echo \"💾 Creating full backup...\"\n            \n            # Create backup directory\n            BACKUP_DIR=\"../phase2_security_backup_$(date +%Y%m%d_%H%M%S)\"\n            mkdir -p \"$BACKUP_DIR\"\n            \n            # Backup Phase 2 security files\n            cp -r src/gateway/middleware/service-auth.js \"$BACKUP_DIR/\" 2>/dev/null || true\n            cp -r src/gateway/middleware/request-validation.js \"$BACKUP_DIR/\" 2>/dev/null || true\n            cp -r src/gateway/services/secrets-manager.js \"$BACKUP_DIR/\" 2>/dev/null || true\n            cp -r src/gateway/schemas/ \"$BACKUP_DIR/\" 2>/dev/null || true\n            cp -r tests/security.test.js \"$BACKUP_DIR/\" 2>/dev/null || true\n            cp -r ../03_ai_engine/src/middleware/service_auth.py \"$BACKUP_DIR/\" 2>/dev/null || true\n            \n            echo \"🗑️ Removing Phase 2 security components...\"\n            \n            # Remove security middleware\n            rm -f src/gateway/middleware/service-auth.js\n            rm -f src/gateway/middleware/request-validation.js\n            rm -f src/gateway/services/secrets-manager.js\n            rm -rf src/gateway/schemas/\n            rm -f tests/security.test.js\n            rm -f ../03_ai_engine/src/middleware/service_auth.py\n            \n            # Revert gateway index.js to Phase 1 state\n            echo \"🔄 Reverting gateway to Phase 1 state...\"\n            \n            # This would restore the original Phase 1 index.js\n            # In a real implementation, we'd have the original backed up\n            \n            # Create simple .env\n            cat > .env << 'EOF'\n# Phase 1 Configuration - Security Rollback\nUSE_API_GATEWAY=true\nENABLE_HEALTH_CHECKS=true\nENABLE_METRICS=true\nENABLE_GATEWAY_LOGGING=true\nAI_ENGINE_URL=http://localhost:8000\nNODE_ENV=development\nPORT=3001\nEOF\n            \n            # Revert AI Engine main.py imports\n            if [ -f \"../03_ai_engine/src/main.py\" ]; then\n                echo \"🔄 Reverting AI Engine to Phase 1 state...\"\n                # Remove service auth imports and dependencies\n                # This would require more sophisticated text processing in production\n                echo \"⚠️ Manual AI Engine revert may be needed\"\n            fi\n            \n            echo \"✅ Full Phase 2 rollback completed\"\n            echo \"📂 All Phase 2 files backed up to: $BACKUP_DIR\"\n        fi\n        ;;\n        \n    *)\n        echo \"❌ Invalid option. Exiting.\"\n        exit 1\n        ;;\nesac\n\necho \"\"\necho \"🔒 Security Rollback Summary:\"\ncase $OPTION in\n    1)\n        echo \"- Service authentication disabled\"\n        echo \"- Services will accept unauthenticated requests\"\n        echo \"- Request validation and other security features remain active\"\n        ;;\n    2)\n        echo \"- Request validation disabled\"\n        echo \"- All requests will bypass validation\"\n        echo \"- Service authentication and other security features remain active\"\n        ;;\n    3)\n        echo \"- All security features disabled\"\n        echo \"- System running in Phase 1 security mode\"\n        echo \"- Gateway functionality preserved\"\n        ;;\n    4)\n        echo \"- All Phase 2 security components removed\"\n        echo \"- System reverted to Phase 1 state\"\n        echo \"- Security files backed up for recovery\"\n        ;;\nesac\n\necho \"\"\necho \"📋 Next Steps:\"\necho \"- Restart both Gateway and AI Engine services\"\necho \"- Monitor logs for any issues\"\necho \"- Test basic functionality\"\necho \"- To re-enable security, set SERVICE_AUTH_ENABLED=true in .env\"\necho \"\"\necho \"🚨 Security Status: $(if [ \"$OPTION\" == \"4\" ]; then echo \"PHASE 1 (Basic)\"; else echo \"REDUCED (Some features disabled)\"; fi)\"\necho \"\"\necho \"✅ Phase 2 security rollback completed successfully!\"\n\n# Restart services if pm2 is available\nif command -v pm2 &> /dev/null; then\n    if confirm \"🔄 Restart services with pm2?\"; then\n        pm2 restart studyai-gateway || echo \"⚠️ Gateway restart failed\"\n        pm2 restart studyai-ai-engine || echo \"⚠️ AI Engine restart failed\"\n    fi\nelse\n    echo \"⚠️ Please manually restart your services\"\nfi