openapi: 3.0.3
info:
  title: StudyAI API Gateway
  description: |
    StudyAI API Gateway provides secure access to AI-powered educational services.
    
    ## Authentication
    - Service-to-service communication uses JWT tokens
    - User authentication via Bearer tokens
    - All requests include request tracking headers
    
    ## Features
    - AI-powered homework assistance
    - Practice question generation  
    - Answer evaluation and feedback
    - Session management
    - Health monitoring and metrics
    
    ## Rate Limiting
    - Default: 100 requests per 15 minutes per IP
    - Authenticated users: Higher limits
    - Contact support for increased limits
    
  version: 2.0.0
  contact:
    name: StudyAI API Support
    url: https://github.com/your-org/studyai
    email: support@studyai.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001
    description: Development server
  - url: https://api.studyai.com
    description: Production server

tags:
  - name: Health
    description: Health check and monitoring endpoints
  - name: AI Processing
    description: AI-powered educational processing
  - name: Sessions
    description: Learning session management
  - name: Authentication
    description: User authentication and authorization

paths:
  # Health and Monitoring Endpoints
  /health:
    get:
      tags: [Health]
      summary: Basic health check
      description: Returns basic health status of the API Gateway
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: "ok"
                service: "api-gateway"
                timestamp: "2025-01-08T10:00:00Z"
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/X-RateLimit-Remaining'

  /health/detailed:
    get:
      tags: [Health]
      summary: Detailed health check
      description: Returns health status of gateway and all downstream services
      operationId: getDetailedHealth
      responses:
        '200':
          description: All services healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedHealthResponse'
        '207':
          description: Some services degraded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedHealthResponse'
        '503':
          description: Critical services unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedHealthResponse'

  /ready:
    get:
      tags: [Health]
      summary: Readiness probe
      description: Kubernetes readiness probe endpoint
      operationId: getReadiness
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadinessResponse'
        '503':
          description: Service not ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadinessResponse'

  /live:
    get:
      tags: [Health]
      summary: Liveness probe
      description: Kubernetes liveness probe endpoint
      operationId: getLiveness
      responses:
        '200':
          description: Service is alive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LivenessResponse'

  /metrics:
    get:
      tags: [Health]
      summary: System metrics
      description: Returns system performance metrics
      operationId: getMetrics
      responses:
        '200':
          description: System metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsResponse'

  # AI Processing Endpoints
  /api/ai/process-question:
    post:
      tags: [AI Processing]
      summary: Process educational question
      description: |
        Process an educational question with AI analysis, providing detailed explanations,
        reasoning steps, and learning recommendations.
      operationId: processQuestion
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionRequest'
            example:
              question: "What is the derivative of x^2 + 3x + 5?"
              subject: "calculus"
              student_id: "student123"
              context: "Working on limits and derivatives unit"
      responses:
        '200':
          description: Question processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionResponse'
          headers:
            X-Request-ID:
              $ref: '#/components/headers/X-Request-ID'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '422':
          $ref: '#/components/responses/ValidationError'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /api/ai/generate-practice:
    post:
      tags: [AI Processing]
      summary: Generate practice questions
      description: Generate personalized practice questions for a specific topic and difficulty level
      operationId: generatePractice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PracticeRequest'
            example:
              subject: "mathematics"
              topic: "quadratic equations"
              difficulty: "medium"
              count: 5
              student_id: "student123"
      responses:
        '200':
          description: Practice questions generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PracticeResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '422':
          $ref: '#/components/responses/ValidationError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /api/ai/evaluate-answer:
    post:
      tags: [AI Processing]
      summary: Evaluate student answer
      description: Evaluate a student's answer and provide detailed feedback and scoring
      operationId: evaluateAnswer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EvaluationRequest'
      responses:
        '200':
          description: Answer evaluation completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EvaluationResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '422':
          $ref: '#/components/responses/ValidationError'

  /api/ai/process-homework-image:
    post:
      tags: [AI Processing]
      summary: Process homework image
      description: |
        Upload and process a homework image, extracting questions and providing solutions.
        Supports JPEG, PNG, and WebP formats up to 10MB.
      operationId: processHomeworkImage
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/HomeworkImageRequest'
      responses:
        '200':
          description: Homework image processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HomeworkImageResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '413':
          description: File too large
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '415':
          description: Unsupported media type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Session Management Endpoints
  /api/ai/sessions/create:
    post:
      tags: [Sessions]
      summary: Create learning session
      description: Create a new learning session for tracking student progress
      operationId: createSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionCreateRequest'
      responses:
        '201':
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '400':
          $ref: '#/components/responses/ValidationError'

  /api/ai/sessions/{sessionId}:
    get:
      tags: [Sessions]
      summary: Get session details
      description: Retrieve details of a specific learning session
      operationId: getSession
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Unique session identifier
      responses:
        '200':
          description: Session details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionResponse'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    # Health Schemas
    HealthResponse:
      type: object
      required: [status, service, timestamp]
      properties:
        status:
          type: string
          enum: [ok, degraded, unhealthy]
          description: Overall health status
        service:
          type: string
          example: "api-gateway"
          description: Service name
        timestamp:
          type: string
          format: date-time
          description: Health check timestamp

    DetailedHealthResponse:
      type: object
      required: [status, timestamp, services]
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        services:
          type: object
          properties:
            gateway:
              $ref: '#/components/schemas/ServiceHealth'
            aiEngine:
              $ref: '#/components/schemas/ServiceHealth'
          additionalProperties:
            $ref: '#/components/schemas/ServiceHealth'

    ServiceHealth:
      type: object
      required: [healthy, status]
      properties:
        healthy:
          type: boolean
        status:
          type: string
          enum: [operational, degraded, down]
        responseTime:
          type: number
          description: Response time in milliseconds
        lastCheck:
          type: string
          format: date-time
        error:
          type: string
          description: Error message if unhealthy

    ReadinessResponse:
      type: object
      required: [ready]
      properties:
        ready:
          type: boolean
        reason:
          type: string
          description: Reason if not ready

    LivenessResponse:
      type: object
      required: [alive, uptime]
      properties:
        alive:
          type: boolean
        uptime:
          type: number
          description: Uptime in seconds

    MetricsResponse:
      type: object
      required: [system, requests]
      properties:
        system:
          type: object
          properties:
            uptime:
              type: number
            memory:
              type: object
              properties:
                used:
                  type: number
                total:
                  type: number
            cpu:
              type: object
        requests:
          type: object
          properties:
            total:
              type: number
            errors:
              type: number
            avgResponseTime:
              type: number

    # AI Processing Schemas
    QuestionRequest:
      type: object
      required: [question, subject, student_id]
      properties:
        question:
          type: string
          minLength: 3
          maxLength: 2000
          description: The educational question to process
          example: "What is the derivative of x^2?"
        subject:
          type: string
          enum: [mathematics, science, english, history, physics, chemistry, biology, calculus, algebra, geometry, other]
          description: Subject area of the question
        student_id:
          type: string
          minLength: 1
          maxLength: 100
          description: Unique identifier for the student
          example: "student123"
        context:
          type: string
          maxLength: 5000
          description: Additional context about the question
          example: "Working on limits and derivatives unit"

    QuestionResponse:
      type: object
      required: [success, answer, processing_time]
      properties:
        success:
          type: boolean
        answer:
          type: string
          description: AI-generated answer
        explanation:
          type: string
          description: Detailed explanation
        reasoning_steps:
          type: array
          items:
            type: string
          description: Step-by-step reasoning
        key_concepts:
          type: array
          items:
            type: string
          description: Key concepts covered
        difficulty_level:
          type: string
          enum: [beginner, intermediate, advanced]
        confidence_score:
          type: number
          minimum: 0
          maximum: 1
          description: AI confidence in the answer
        processing_time:
          type: number
          description: Processing time in milliseconds
        follow_up_questions:
          type: array
          items:
            type: string
          description: Suggested follow-up questions

    PracticeRequest:
      type: object
      required: [subject, topic, student_id]
      properties:
        subject:
          type: string
          enum: [mathematics, science, english, history, physics, chemistry, biology, calculus, algebra, geometry, other]
        topic:
          type: string
          minLength: 2
          maxLength: 200
          description: Specific topic for practice questions
        difficulty:
          type: string
          enum: [easy, medium, hard, beginner, intermediate, advanced]
          default: medium
        count:
          type: integer
          minimum: 1
          maximum: 10
          default: 5
          description: Number of practice questions to generate
        student_id:
          type: string
          minLength: 1
          maxLength: 100

    PracticeResponse:
      type: object
      required: [success, questions]
      properties:
        success:
          type: boolean
        questions:
          type: array
          items:
            $ref: '#/components/schemas/PracticeQuestion'
        topic:
          type: string
        difficulty:
          type: string
        generated_count:
          type: integer

    PracticeQuestion:
      type: object
      required: [question, answer, difficulty]
      properties:
        question:
          type: string
        answer:
          type: string
        explanation:
          type: string
        difficulty:
          type: string
        hints:
          type: array
          items:
            type: string

    EvaluationRequest:
      type: object
      required: [question, student_answer, student_id]
      properties:
        question:
          type: string
          minLength: 3
          maxLength: 2000
        student_answer:
          type: string
          minLength: 1
          maxLength: 5000
        correct_answer:
          type: string
          maxLength: 5000
        subject:
          type: string
          enum: [mathematics, science, english, history, physics, chemistry, biology, calculus, algebra, geometry, other]
        student_id:
          type: string
          minLength: 1
          maxLength: 100

    EvaluationResponse:
      type: object
      required: [success, evaluation]
      properties:
        success:
          type: boolean
        evaluation:
          type: object
          required: [correct, score, feedback]
          properties:
            correct:
              type: boolean
            score:
              type: number
              minimum: 0
              maximum: 100
            feedback:
              type: string
            areas_for_improvement:
              type: array
              items:
                type: string
            strengths:
              type: array
              items:
                type: string

    HomeworkImageRequest:
      type: object
      required: [image, student_id]
      properties:
        image:
          type: string
          format: binary
          description: Homework image file (JPEG, PNG, WebP, max 10MB)
        student_id:
          type: string
          minLength: 1
          maxLength: 100
        subject:
          type: string
          enum: [mathematics, science, english, history, physics, chemistry, biology, calculus, algebra, geometry, other]

    HomeworkImageResponse:
      type: object
      required: [success, questions_found, parsing_method]
      properties:
        success:
          type: boolean
        questions_found:
          type: integer
          minimum: 0
        parsing_method:
          type: string
          enum: [json_parsing, fallback_parsing]
        questions:
          type: array
          items:
            $ref: '#/components/schemas/ExtractedQuestion'
        subject_detected:
          type: string
        confidence_score:
          type: number
          minimum: 0
          maximum: 1
        processing_time:
          type: number

    ExtractedQuestion:
      type: object
      required: [question_text, answer]
      properties:
        question_text:
          type: string
        answer:
          type: string
        explanation:
          type: string
        difficulty:
          type: string
        confidence:
          type: number
          minimum: 0
          maximum: 1

    # Session Schemas
    SessionCreateRequest:
      type: object
      required: [student_id]
      properties:
        student_id:
          type: string
          minLength: 1
          maxLength: 100
        subject:
          type: string
          enum: [mathematics, science, english, history, physics, chemistry, biology, calculus, algebra, geometry, other]
        session_type:
          type: string
          enum: [homework, practice, review, test]
          default: homework

    SessionResponse:
      type: object
      required: [session_id, student_id, created_at, status]
      properties:
        session_id:
          type: string
          format: uuid
        student_id:
          type: string
        subject:
          type: string
        session_type:
          type: string
        created_at:
          type: string
          format: date-time
        last_activity:
          type: string
          format: date-time
        status:
          type: string
          enum: [active, completed, expired]
        question_count:
          type: integer
          minimum: 0

    # Error Schemas
    ErrorResponse:
      type: object
      required: [error, message, code, timestamp]
      properties:
        error:
          type: string
          description: Error category
        message:
          type: string
          description: Human-readable error message
        code:
          type: string
          description: Machine-readable error code
        timestamp:
          type: string
          format: date-time
        request_id:
          type: string
          description: Unique request identifier for debugging

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            details:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  message:
                    type: string
                  value:
                    description: The invalid value

  responses:
    ValidationError:
      description: Request validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
          example:
            error: "Validation Error"
            message: "Invalid request data"
            code: "VALIDATION_FAILED"
            timestamp: "2025-01-08T10:00:00Z"
            details:
              - field: "student_id"
                message: "Student ID is required"
                value: null

    AuthenticationError:
      description: Authentication failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Authentication Failed"
            message: "Invalid or missing authentication token"
            code: "AUTH_FAILED"
            timestamp: "2025-01-08T10:00:00Z"

    RateLimitError:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Rate Limit Exceeded"
            message: "Too many requests. Limit: 100 per 15 minutes"
            code: "RATE_LIMIT_EXCEEDED"
            timestamp: "2025-01-08T10:00:00Z"

    ServiceUnavailable:
      description: AI service temporarily unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Service Unavailable"
            message: "AI service temporarily unavailable"
            code: "SERVICE_UNAVAILABLE"
            timestamp: "2025-01-08T10:00:00Z"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Not Found"
            message: "The requested resource was not found"
            code: "NOT_FOUND"
            timestamp: "2025-01-08T10:00:00Z"

  headers:
    X-Request-ID:
      description: Unique request identifier for debugging
      schema:
        type: string
        format: uuid
      example: "123e4567-e89b-12d3-a456-426614174000"

    X-RateLimit-Remaining:
      description: Number of requests remaining in current window
      schema:
        type: integer
      example: 95

    X-RateLimit-Reset:
      description: Time when rate limit window resets
      schema:
        type: string
        format: date-time
      example: "2025-01-08T10:15:00Z"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for user authentication

    ServiceAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for service-to-service authentication

security:
  - BearerAuth: []
  - ServiceAuth: []