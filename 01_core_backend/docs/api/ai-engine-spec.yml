openapi: 3.0.3
info:
  title: StudyAI AI Engine Service
  description: |
    Internal AI Engine service for processing educational content and generating responses.
    
    ## Service Architecture
    - FastAPI-based Python service
    - Service-to-service authentication with JWT tokens
    - High-performance AI processing endpoints
    - Vector similarity search capabilities
    
    ## Authentication
    - Service JWT tokens required for all endpoints
    - Token validation with audience and issuer verification
    - Secure service-to-service communication
    
    ## Features
    - Text-based question processing
    - Image-based homework analysis  
    - Practice question generation
    - Answer evaluation and scoring
    - Performance optimization for educational content
    
  version: 1.0.0
  contact:
    name: StudyAI AI Engine Support
    url: https://github.com/your-org/studyai
    email: ai-support@studyai.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Development server
  - url: https://ai-engine.studyai.com
    description: Production server

tags:
  - name: Health
    description: Service health and monitoring endpoints
  - name: Text Processing
    description: Text-based educational content processing
  - name: Image Processing
    description: Image-based homework and content analysis
  - name: Generation
    description: AI content generation endpoints
  - name: Evaluation
    description: Answer evaluation and scoring

paths:
  # Health and Monitoring Endpoints
  /health:
    get:
      tags: [Health]
      summary: Basic health check
      description: Returns basic health status of the AI Engine
      operationId: getAIEngineHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: "healthy"
                service: "ai-engine"
                version: "1.0.0"
                timestamp: "2025-01-08T10:00:00Z"
                uptime: 3600

  /health/detailed:
    get:
      tags: [Health]
      summary: Detailed health check
      description: Returns health status including AI model status and dependencies
      operationId: getDetailedAIHealth
      responses:
        '200':
          description: All components healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedHealthResponse'
        '207':
          description: Some components degraded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedHealthResponse'

  /ready:
    get:
      tags: [Health]
      summary: Readiness probe
      description: Kubernetes readiness probe for AI Engine
      operationId: getAIReadiness
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadinessResponse'
        '503':
          description: Service not ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadinessResponse'

  # Text Processing Endpoints
  /api/process-question:
    post:
      tags: [Text Processing]
      summary: Process educational question
      description: |
        Process a text-based educational question using AI models.
        Provides detailed analysis, step-by-step solutions, and learning recommendations.
      operationId: processTextQuestion
      security:
        - ServiceAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionProcessingRequest'
            example:
              question: "What is the derivative of x^2 + 3x + 5?"
              subject: "calculus"
              student_id: "student123"
              context: "Working on limits and derivatives unit"
              difficulty_preference: "intermediate"
      responses:
        '200':
          description: Question processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionProcessingResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/AuthenticationError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /api/analyze-image:
    post:
      tags: [Image Processing]
      summary: Analyze homework image
      description: |
        Extract and analyze questions from homework images using computer vision and OCR.
        Supports multiple image formats and provides confidence scores.
      operationId: analyzeHomeworkImage
      security:
        - ServiceAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageAnalysisRequest'
      responses:
        '200':
          description: Image analyzed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageAnalysisResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '413':
          description: Image too large
        '415':
          description: Unsupported image format

  /api/generate-practice:
    post:
      tags: [Generation]
      summary: Generate practice questions
      description: Generate personalized practice questions based on subject, topic, and difficulty
      operationId: generatePracticeQuestions
      security:
        - ServiceAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PracticeGenerationRequest'
            example:
              subject: "mathematics"
              topic: "quadratic equations"
              difficulty: "intermediate"
              count: 5
              student_id: "student123"
              learning_style: "visual"
      responses:
        '200':
          description: Practice questions generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PracticeGenerationResponse'
        '400':
          $ref: '#/components/responses/ValidationError'

  /api/evaluate-answer:
    post:
      tags: [Evaluation]
      summary: Evaluate student answer
      description: |
        Comprehensive evaluation of student answers with detailed feedback,
        scoring, and personalized improvement recommendations.
      operationId: evaluateStudentAnswer
      security:
        - ServiceAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnswerEvaluationRequest'
      responses:
        '200':
          description: Answer evaluated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswerEvaluationResponse'
        '400':
          $ref: '#/components/responses/ValidationError'

  # Advanced Processing Endpoints
  /api/similarity-search:
    post:
      tags: [Text Processing]
      summary: Find similar questions
      description: Find similar questions using vector similarity search
      operationId: findSimilarQuestions
      security:
        - ServiceAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimilaritySearchRequest'
      responses:
        '200':
          description: Similar questions found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimilaritySearchResponse'

  /api/explain-concept:
    post:
      tags: [Text Processing]
      summary: Explain educational concept
      description: Provide detailed explanation of educational concepts with examples
      operationId: explainConcept
      security:
        - ServiceAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConceptExplanationRequest'
      responses:
        '200':
          description: Concept explained successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptExplanationResponse'

components:
  schemas:
    # Health Schemas
    HealthResponse:
      type: object
      required: [status, service, version, timestamp, uptime]
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        service:
          type: string
          example: "ai-engine"
        version:
          type: string
          example: "1.0.0"
        timestamp:
          type: string
          format: date-time
        uptime:
          type: number
          description: Uptime in seconds

    DetailedHealthResponse:
      type: object
      required: [status, timestamp, components, performance]
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        components:
          type: object
          properties:
            ai_models:
              $ref: '#/components/schemas/ComponentHealth'
            database:
              $ref: '#/components/schemas/ComponentHealth'
            vector_store:
              $ref: '#/components/schemas/ComponentHealth'
            ocr_service:
              $ref: '#/components/schemas/ComponentHealth'
        performance:
          type: object
          properties:
            avg_processing_time:
              type: number
              description: Average processing time in milliseconds
            requests_per_minute:
              type: number
            success_rate:
              type: number
              minimum: 0
              maximum: 1

    ComponentHealth:
      type: object
      required: [healthy, status]
      properties:
        healthy:
          type: boolean
        status:
          type: string
          enum: [operational, degraded, down]
        response_time:
          type: number
          description: Response time in milliseconds
        last_check:
          type: string
          format: date-time
        error:
          type: string
          description: Error message if unhealthy

    ReadinessResponse:
      type: object
      required: [ready]
      properties:
        ready:
          type: boolean
        components:
          type: object
          properties:
            models_loaded:
              type: boolean
            database_connected:
              type: boolean
            dependencies_ready:
              type: boolean

    # Processing Request/Response Schemas
    QuestionProcessingRequest:
      type: object
      required: [question, subject, student_id]
      properties:
        question:
          type: string
          minLength: 3
          maxLength: 5000
          description: The educational question to process
        subject:
          type: string
          enum: [mathematics, science, english, history, physics, chemistry, biology, calculus, algebra, geometry, other]
        student_id:
          type: string
          minLength: 1
          maxLength: 100
        context:
          type: string
          maxLength: 5000
          description: Additional context about the question
        difficulty_preference:
          type: string
          enum: [beginner, intermediate, advanced]
          description: Preferred explanation difficulty level
        learning_style:
          type: string
          enum: [visual, auditory, kinesthetic, reading]
          description: Student's preferred learning style

    QuestionProcessingResponse:
      type: object
      required: [success, result, processing_time]
      properties:
        success:
          type: boolean
        result:
          type: object
          required: [answer, confidence_score]
          properties:
            answer:
              type: string
              description: AI-generated answer
            explanation:
              type: string
              description: Detailed step-by-step explanation
            reasoning_steps:
              type: array
              items:
                type: object
                properties:
                  step:
                    type: string
                  explanation:
                    type: string
                  mathematical_expression:
                    type: string
            key_concepts:
              type: array
              items:
                type: string
            difficulty_level:
              type: string
              enum: [beginner, intermediate, advanced]
            confidence_score:
              type: number
              minimum: 0
              maximum: 1
            similar_problems:
              type: array
              items:
                type: string
            follow_up_questions:
              type: array
              items:
                type: string
        processing_time:
          type: number
          description: Processing time in milliseconds
        model_info:
          type: object
          properties:
            model_name:
              type: string
            model_version:
              type: string
            tokens_used:
              type: number

    ImageAnalysisRequest:
      type: object
      required: [image, student_id]
      properties:
        image:
          type: string
          format: binary
          description: Image file (JPEG, PNG, WebP, max 20MB)
        student_id:
          type: string
          minLength: 1
          maxLength: 100
        subject_hint:
          type: string
          enum: [mathematics, science, english, history, physics, chemistry, biology, calculus, algebra, geometry, other]
        processing_options:
          type: object
          properties:
            enhance_quality:
              type: boolean
              default: true
            extract_diagrams:
              type: boolean
              default: true
            ocr_language:
              type: string
              default: "en"

    ImageAnalysisResponse:
      type: object
      required: [success, processing_time]
      properties:
        success:
          type: boolean
        extracted_text:
          type: string
          description: OCR extracted text
        questions_found:
          type: integer
          minimum: 0
        questions:
          type: array
          items:
            $ref: '#/components/schemas/ExtractedQuestion'
        image_quality:
          type: object
          properties:
            resolution:
              type: string
            clarity_score:
              type: number
              minimum: 0
              maximum: 1
            enhancement_applied:
              type: boolean
        processing_method:
          type: string
          enum: [ocr_only, vision_model, hybrid]
        confidence_score:
          type: number
          minimum: 0
          maximum: 1
        processing_time:
          type: number

    ExtractedQuestion:
      type: object
      required: [question_text, confidence]
      properties:
        question_text:
          type: string
        answer:
          type: string
        explanation:
          type: string
        subject_detected:
          type: string
        difficulty_estimated:
          type: string
          enum: [beginner, intermediate, advanced]
        confidence:
          type: number
          minimum: 0
          maximum: 1
        bounding_box:
          type: object
          description: Location of question in image
          properties:
            x:
              type: number
            y:
              type: number
            width:
              type: number
            height:
              type: number

    PracticeGenerationRequest:
      type: object
      required: [subject, topic, student_id]
      properties:
        subject:
          type: string
          enum: [mathematics, science, english, history, physics, chemistry, biology, calculus, algebra, geometry, other]
        topic:
          type: string
          minLength: 2
          maxLength: 200
        difficulty:
          type: string
          enum: [beginner, intermediate, advanced]
          default: intermediate
        count:
          type: integer
          minimum: 1
          maximum: 20
          default: 5
        student_id:
          type: string
          minLength: 1
          maxLength: 100
        learning_style:
          type: string
          enum: [visual, auditory, kinesthetic, reading]
        question_types:
          type: array
          items:
            type: string
            enum: [multiple_choice, short_answer, problem_solving, essay, true_false]
        exclude_topics:
          type: array
          items:
            type: string

    PracticeGenerationResponse:
      type: object
      required: [success, questions]
      properties:
        success:
          type: boolean
        questions:
          type: array
          items:
            $ref: '#/components/schemas/GeneratedQuestion'
        metadata:
          type: object
          properties:
            topic:
              type: string
            difficulty:
              type: string
            generated_count:
              type: integer
            generation_method:
              type: string
        processing_time:
          type: number

    GeneratedQuestion:
      type: object
      required: [question, answer, difficulty]
      properties:
        question:
          type: string
        answer:
          type: string
        explanation:
          type: string
        difficulty:
          type: string
        question_type:
          type: string
        hints:
          type: array
          items:
            type: string
        key_concepts:
          type: array
          items:
            type: string
        estimated_time:
          type: number
          description: Estimated time to solve in minutes

    AnswerEvaluationRequest:
      type: object
      required: [question, student_answer, student_id]
      properties:
        question:
          type: string
          minLength: 3
          maxLength: 5000
        student_answer:
          type: string
          minLength: 1
          maxLength: 10000
        correct_answer:
          type: string
          maxLength: 10000
        subject:
          type: string
          enum: [mathematics, science, english, history, physics, chemistry, biology, calculus, algebra, geometry, other]
        student_id:
          type: string
          minLength: 1
          maxLength: 100
        evaluation_criteria:
          type: object
          properties:
            check_methodology:
              type: boolean
              default: true
            check_final_answer:
              type: boolean
              default: true
            partial_credit:
              type: boolean
              default: true

    AnswerEvaluationResponse:
      type: object
      required: [success, evaluation]
      properties:
        success:
          type: boolean
        evaluation:
          type: object
          required: [correct, score, feedback]
          properties:
            correct:
              type: boolean
            score:
              type: number
              minimum: 0
              maximum: 100
            feedback:
              type: string
              description: Detailed feedback on the answer
            detailed_analysis:
              type: object
              properties:
                methodology_score:
                  type: number
                  minimum: 0
                  maximum: 100
                final_answer_score:
                  type: number
                  minimum: 0
                  maximum: 100
                presentation_score:
                  type: number
                  minimum: 0
                  maximum: 100
            strengths:
              type: array
              items:
                type: string
            areas_for_improvement:
              type: array
              items:
                type: string
            suggestions:
              type: array
              items:
                type: string
            similar_problems:
              type: array
              items:
                type: string
        processing_time:
          type: number

    SimilaritySearchRequest:
      type: object
      required: [query, student_id]
      properties:
        query:
          type: string
          minLength: 3
          maxLength: 1000
        subject:
          type: string
          enum: [mathematics, science, english, history, physics, chemistry, biology, calculus, algebra, geometry, other]
        student_id:
          type: string
        limit:
          type: integer
          minimum: 1
          maximum: 50
          default: 10
        similarity_threshold:
          type: number
          minimum: 0
          maximum: 1
          default: 0.7

    SimilaritySearchResponse:
      type: object
      required: [success, results]
      properties:
        success:
          type: boolean
        results:
          type: array
          items:
            type: object
            properties:
              question:
                type: string
              answer:
                type: string
              similarity_score:
                type: number
                minimum: 0
                maximum: 1
              subject:
                type: string
              difficulty:
                type: string
        processing_time:
          type: number

    ConceptExplanationRequest:
      type: object
      required: [concept, subject, student_id]
      properties:
        concept:
          type: string
          minLength: 2
          maxLength: 200
        subject:
          type: string
          enum: [mathematics, science, english, history, physics, chemistry, biology, calculus, algebra, geometry, other]
        student_id:
          type: string
        difficulty_level:
          type: string
          enum: [beginner, intermediate, advanced]
          default: intermediate
        include_examples:
          type: boolean
          default: true
        learning_style:
          type: string
          enum: [visual, auditory, kinesthetic, reading]

    ConceptExplanationResponse:
      type: object
      required: [success, explanation]
      properties:
        success:
          type: boolean
        explanation:
          type: object
          required: [concept, definition, explanation_text]
          properties:
            concept:
              type: string
            definition:
              type: string
            explanation_text:
              type: string
            examples:
              type: array
              items:
                type: object
                properties:
                  example:
                    type: string
                  explanation:
                    type: string
            visual_aids:
              type: array
              items:
                type: string
            related_concepts:
              type: array
              items:
                type: string
            practice_problems:
              type: array
              items:
                type: string
        processing_time:
          type: number

    # Error Schemas
    ErrorResponse:
      type: object
      required: [error, message, code, timestamp]
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: string
        timestamp:
          type: string
          format: date-time
        service:
          type: string
          example: "ai-engine"
        request_id:
          type: string

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            details:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  message:
                    type: string
                  value:
                    description: The invalid value

  responses:
    ValidationError:
      description: Request validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    AuthenticationError:
      description: Service authentication failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Authentication Failed"
            message: "Invalid or missing service token"
            code: "SERVICE_AUTH_FAILED"
            timestamp: "2025-01-08T10:00:00Z"
            service: "ai-engine"

    ServiceUnavailable:
      description: AI service temporarily unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "Service Unavailable"
            message: "AI models are currently loading"
            code: "MODELS_LOADING"
            timestamp: "2025-01-08T10:00:00Z"
            service: "ai-engine"

  securitySchemes:
    ServiceAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for service-to-service authentication

security:
  - ServiceAuth: []